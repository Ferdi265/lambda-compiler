use std::*;
use io::*;
use super::util::*;
use super::tape::*;

pub EXECUTE = 0;
pub SKIP = 1;
pub RSKIP = 2;

TERMINATE = pair false ident;
NEXT_STATE = state -> nestcount -> code -> data -> pair true (pair (pair state nestcount) (pair code data));
RECURSE = interpret -> next_state ->
    1st next_state
        (_ -> interpret
            (1st (1st (2nd next_state)))
            (2nd (1st (2nd next_state)))
            (1st (2nd (2nd next_state)))
            (2nd (2nd (2nd next_state)))
        )
        (_ -> ident)
    ident;

pub impure run = y interpret -> state -> nestcount -> code -> data -> (
    set (code get_val) op ->
    set (data get_val) val ->
    set (switch state
        case EXECUTE (_ ->
            set (code move_right) code ->
            switch op
                case !0 (_ ->
                    TERMINATE
                )
                case !'>' (_ ->
                    set (data move_right) data ->
                    NEXT_STATE state nestcount code data
                )
                case !'<' (_ ->
                    set (data move_left) data ->
                    NEXT_STATE state nestcount code data
                )
                case !'+' (_ ->
                    set (data set_val (rem (add val !1) !256)) data ->
                    NEXT_STATE state nestcount code data
                )
                case !'-' (_ ->
                    set (data set_val (rem (add val !255) !256)) data ->
                    NEXT_STATE state nestcount code data
                )
                case !'.' (_ ->
                    do (putc val)
                    NEXT_STATE state nestcount code data
                )
                case !',' (_ ->
                    set (data set_val (io::getc ident)) data ->
                    NEXT_STATE state nestcount code data
                )
                case !'[' (_ ->
                    if (iszero val)
                        then (_ ->
                            set SKIP state ->
                            set !0 nestcount ->
                            NEXT_STATE state nestcount code data
                        )
                        else (_ ->
                            NEXT_STATE state nestcount code data
                        )
                    fi
                )
                case !']' (_ ->
                    if (iszero val)
                        then (_ ->
                            NEXT_STATE state nestcount code data
                        )
                        else (_ ->
                            set (code move_left) code ->
                            set (code move_left) code ->
                            set RSKIP state ->
                            set !0 nestcount ->
                            NEXT_STATE state nestcount code data
                        )
                    fi
                )
                default (_ ->
                    NEXT_STATE state nestcount code data
                )
            esac
        )
        case SKIP (_ ->
            set (code move_right) code ->
            switch op
                case !0 (_ -> TERMINATE)
                case !'[' (_ ->
                    set (succ nestcount) nestcount ->
                    NEXT_STATE state nestcount code data
                )
                case !']' (_ ->
                    if (iszero nestcount)
                        then (_ ->
                            set EXECUTE state ->
                            NEXT_STATE state nestcount code data
                        )
                        else (_ ->
                            set (pred nestcount) nestcount ->
                            NEXT_STATE state nestcount code data
                        )
                    fi
                )
                default (_ ->
                    NEXT_STATE state nestcount code data
                )
            esac
        )
        case RSKIP (_ ->
            set (code move_left) code ->
            switch op
                case !0 (_ -> TERMINATE)
                case !'[' (_ ->
                    if (iszero nestcount)
                        then (_ ->
                            set (code move_right) code ->
                            set EXECUTE state ->
                            NEXT_STATE state nestcount code data
                        )
                        else (_ ->
                            set (pred nestcount) nestcount ->
                            NEXT_STATE state nestcount code data
                        )
                    fi
                )
                case !']' (_ ->
                    set (succ nestcount) nestcount ->
                    NEXT_STATE state nestcount code data
                )
                default (_ ->
                    NEXT_STATE state nestcount code data
                )
            esac
        )
        default (_ -> TERMINATE)
    esac) next_state ->
    RECURSE interpret next_state
);
