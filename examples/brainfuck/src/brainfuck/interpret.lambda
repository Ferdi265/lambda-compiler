use std::*;
use io::*;
use super::util::*;
use super::tape::*;

pub EXECUTE = !0;
pub SKIP = !1;
pub RSKIP = !2;

pub impure run = y interpret -> state -> nestcount -> code -> data -> (
    set (code get_val) op ->
    set (data get_val) val ->
    switch state
        case EXECUTE (_ ->
            set (code move_right) code ->
            switch op
                case !0 (_ -> ident)
                case !'>' (_ ->
                    set (data move_right) data ->
                    interpret EXECUTE !0 code data
                )
                case !'<' (_ ->
                    set (data move_left) data ->
                    interpret EXECUTE !0 code data
                )
                case !'+' (_ ->
                    set (data set_val (rem (add val !1) !256)) data ->
                    interpret EXECUTE !0 code data
                )
                case !'-' (_ ->
                    set (data set_val (rem (add val !255) !256)) data ->
                    interpret EXECUTE !0 code data
                )
                case !'.' (_ ->
                    do (putc val)
                    interpret EXECUTE !0 code data
                )
                case !',' (_ ->
                    set (data set_val (io::getc ident)) data ->
                    interpret EXECUTE !0 code data
                )
                case !'[' (_ ->
                    if (iszero val)
                        then (_ ->
                            interpret SKIP !0 code data
                        )
                        else (_ ->
                            interpret EXECUTE !0 code data
                        )
                    fi
                )
                case !']' (_ ->
                    if (iszero val)
                        then (_ ->
                            interpret EXECUTE !0 code data
                        )
                        else (_ ->
                            set (code move_left) code ->
                            set (code move_left) code ->
                            interpret RSKIP !0 code data
                        )
                    fi
                )
                default (_ ->
                    interpret EXECUTE !0 code data
                )
            esac
        )
        case SKIP (_ ->
            set (code move_right) code ->
            switch op
                case !0 (_ -> ident)
                case !'[' (_ ->
                    set (succ nestcount) nestcount ->
                    interpret SKIP nestcount code data
                )
                case !']' (_ ->
                    if (iszero nestcount)
                        then (_ ->
                            interpret EXECUTE !0 code data
                        )
                        else (_ ->
                            set (pred nestcount) nestcount ->
                            interpret SKIP nestcount code data
                        )
                    fi
                )
                default (_ ->
                    interpret SKIP nestcount code data
                )
            esac
        )
        case RSKIP (_ ->
            set (code move_left) code ->
            switch op
                case !0 (_ -> ident)
                case !'[' (_ ->
                    if (iszero nestcount)
                        then (_ ->
                            set (code move_right) code ->
                            interpret EXECUTE !0 code data
                        )
                        else (_ ->
                            set (pred nestcount) nestcount ->
                            interpret RSKIP nestcount code data
                        )
                    fi
                )
                case !']' (_ ->
                    set (succ nestcount) nestcount ->
                    interpret RSKIP nestcount code data
                )
                default (_ ->
                    interpret RSKIP nestcount code data
                )
            esac
        )
        default (_ -> ident)
    esac
);
